"""Assignment 1 - Grocery Store Events (Task 2)

CSC148 Winter 2024
Department of Computer Science,
University of Toronto

This code is provided solely for the personal and private use of
students taking the CSC148 course at the University of Toronto.
Copying for purposes other than this use is expressly prohibited.
All forms of distribution of this code, whether as given or with
any changes, are expressly prohibited.

All of the files in this directory are
Copyright (c) Jonathan Calver, Diane Horton, Sophia Huynh, Joonho Kim and
Jacqueline Smith.

Module Description:

When you are done Task 2, this file should contain all the classes
necessary to model the different kinds of events in the simulation.
"""
from __future__ import annotations

from io import StringIO
from typing import TextIO
from store import GroceryStore, Customer, Item, NoAvailableLineError


class Event:
    """An event in our grocery store simulation.

    Events have an ordering based on the event timestamp. For any two events
    e1 and e2, e1 < e2 iff event e1 has a timestamp that is less than event e2.
    This signifies that e1 happens before e2.

    This is an abstract class and should not be instantiated.

    Attributes:
    - timestamp: The time when this event occurs.

    Representation Invariants:
    - timestamp >= 0
    """

    timestamp: int

    def __init__(self, timestamp: int) -> None:
        """Initialize an Event with a given timestamp.

        Preconditions:
            - timestamp >= 0

        >>> Event(7).timestamp
        7
        """
        self.timestamp = timestamp

    # The following three methods allow for comparison of Event instances
    # using the standard comparison operators, such as ==, <, and <=.
    # All methods simply perform the desired comparison on the 'timestamp'
    # attribute of the two events.
    def __eq__(self, other: Event) -> bool:
        """Return whether this Event is equal to <other>.

        Two events are equal iff they have the same timestamp.

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first == second
        False
        >>> second.timestamp = first.timestamp
        >>> first == second
        True
        """
        return self.timestamp == other.timestamp

    def __lt__(self, other: Event) -> bool:
        """Return True iff this Event is less than <other>.

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first < second
        True
        >>> second < first
        False
        """
        return self.timestamp < other.timestamp

    def __le__(self, other: Event) -> bool:
        """Return True iff this Event is less than or equal to <other>.

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first <= first
        True
        >>> first <= second
        True
        >>> second <= first
        False
        """
        return self.timestamp <= other.timestamp

    def do(self, store: GroceryStore) -> list[Event]:
        """Perform this event as specified in the A1 handout, and return any
        events generated by doing so.
        """
        raise NotImplementedError


class CustomerArrival(Event):
    """A customer arrives at the checkout area ready to join a line and
    check out.

    Attributes:
    - customer: The arriving customer
    """

    timestamp: int
    customer: Customer

    def __init__(self, timestamp: int, c: Customer) -> None:
        """Initialize a CustomerArrival event with the given <timestamp>
        and customer <c>.

        If the customer's arrival time is None, set it now to record
        the fact that this is the time when they first arrived at the
        checkout area. (This is the start of their waiting time.)

        Preconditions:
        - timestamp >= 0
        """
        super().__init__(timestamp)
        self.timestamp = timestamp
        self.customer = c

    def do(self, store: GroceryStore) -> list[Event]:
        """If a customer joins an empty checkout line, a new checkout Started
        event added with the same timestamp as the Customer Arrival event.
        If there is no line for the customer to join, a new Customer Arrival
        event is generated for them, with a timestamp that is one step in the
        future"""
        # 创建一个Event，要么是第一个pass的，要么是waiting，要么不在队列
        # 如果一开始是None，min取到第一次的最小值，后续若加入不了，每次返回的还是最小的到达时间
        if self.customer.arrival_time is None:
            self.customer.arrival_time = self.timestamp
        else:
            self.customer.arrival_time = min(self.timestamp,
                                             self.customer.arrival_time)

        try:
            i = store.enter_line(self.customer)
        except NoAvailableLineError:
            return [CustomerArrival(self.timestamp + 1, self.customer)]
        else:
            # 有队伍加入
            # 如果第一个人是这个customer
            if store.first_in_line(i) == self.customer:
                return [CheckoutStarted(self.timestamp, i)]
            else:
                # 第一个不是那个人,return []，就让他排队排着
                return []


class CheckoutStarted(Event):
    """A customer starts the checkout process in a particular checkout line.

    Attributes:
    - line_number: The number of the checkout line.
    """

    timestamp: int
    line_number: int

    def __init__(self, timestamp: int, line_number: int) -> None:
        """Initialize a CheckoutStarted event with the given <timestamp>
        and <line_number>.

        Preconditions:
        - timestamp >= 0
        - line_number >= 0
        """
        super().__init__(timestamp)
        self.timestamp = timestamp
        self.line_number = line_number

    def do(self, store: GroceryStore) -> list[Event]:
        """If a customer begins checking out, a new Checkout Completed event
        is added with the same timestamp as the Checkout Started timestamp,
        plus the appropriate amount of time based on the type of checkout line
        and the time required for the customer’s items."""
        return [
            CheckoutCompleted(
                self.timestamp + store.next_checkout_time(self.line_number),
                self.line_number,
                store.first_in_line(self.line_number),
            )
        ]


class CheckoutCompleted(Event):
    """A customer finishes the checkout process.

    Attributes:
    - line_number: The number of the checkout line where a customer
      is finishing.
    - customer: The finishing customer.
    """

    timestamp: int
    line_number: int
    customer: Customer

    def __init__(self, timestamp: int, line_number: int, c: Customer) -> None:
        """Initialize a CheckoutCompleted event."""
        super().__init__(timestamp)
        self.timestamp = timestamp
        self.line_number = line_number
        self.customer = c

    def do(self, store: GroceryStore) -> list[Event]:
        """If a customer finishes checking out, the next customer in the line
        (there is one) gets a Checkout Started event with the same timestamp
        as the Checkout Completed event."""
        # i 是那列还有多少人，且移除第一个了。即此处checkout的是下一个（新的第一位）
        i = store.remove_front_customer(self.line_number)
        if i != 0:
            return [CheckoutStarted(self.timestamp, self.line_number)]
        else:
            return []


class CloseLine(Event):
    """A CheckoutLine gets closed.

    Attributes:
    - line_number: The number of the checkout line.
    """

    timestamp: int
    line_number: int

    def __init__(self, timestamp: int, line_number: int) -> None:
        """Initialize a CloseLine event."""
        super().__init__(timestamp)
        self.timestamp = timestamp
        self.line_number = line_number

    def do(self, store: GroceryStore) -> list[Event]:
        """If a line closes, all but the first customer in line needs to go
        into a new line, starting with the customer at the end – essentially
        they re-arrive at the checkout area. So there is one Customer Arrival
        event per customer in the line that is closing
        (except the first customer). The last customer in the line should have
        a Customer Arrival event whose time is the same as the time of the
        “close line” event, and the other Customer Arrival events should follow
        it in time, spaced 1 second apart."""
        lst = []
        close_l = store.close_line(self.line_number)
        for i in close_l[::-1]:
            lst.append(CustomerArrival(self.timestamp, i))
            # 用倒序的那一列的剩余的customer来 创建CustomerArrive
            # 此处的timestamp是 arrive的时间戳，而不是开始checkout的时间戳，
            # 若前面还有一坨人，在表面上+1无所谓 -- events_mixtures.txt的41s为什么不用+1
            self.timestamp += 1
        return lst


EVENT_SAMPLE = StringIO(
    """121 Arrive William Bananas 7
22 Arrive Trevor Flowers 22 Bread 3 Cheese 3 Cheese 3
41 Close 0"""
)


def create_event_list(event_file: TextIO) -> list[Event]:
    """Return a list of Event objects to represent the events in <filename>.

    The events in the list must be in the same order as they are in the file.

    Preconditions:
    - <event_file> is open.
    - <event_file> is in the format specified by the assignment handout.

    >>> samp_events = create_event_list(EVENT_SAMPLE)
    >>> len(samp_events) == 3
    True
    >>> isinstance(samp_events[0], CustomerArrival)
    True
    >>> isinstance(samp_events[2], CloseLine)
    True
    """
    lst = []
    all_items = event_file.readlines()
    for i in all_items:
        ev = i.split()
        ti = int(ev[0])  # 时间
        name = ev[2]  # customer人名字或者 0 for Close
        item = []  # name 的Item
        for j in range(3, len(ev), 2):
            item.append(Item(ev[j], int(ev[j + 1])))
            # 在分出来的list里面从第三个开始2个2个变成Item格式
        if ev[1] == "Arrive":
            lst.append(CustomerArrival(ti, Customer(name, item)))
            # 第二位是Arrive，就用Customer arrive
        elif ev[1] == "Close":
            lst.append(CloseLine(ti, int(name)))
    return lst


if __name__ == '__main__':
    import doctest

    doctest.testmod()

    check_pyta = True
    if check_pyta:
        import python_ta

        python_ta.check_all(
            config={
                'allowed-import-modules': [
                    '__future__',
                    'typing',
                    'store',
                    'python_ta',
                    'doctest',
                    'io',
                ]
            }
        )
